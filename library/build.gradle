buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.1'
}

apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    jcenter()
}

// versioning
def majorVersion = 0
def minorVersion = 9
def patchVersion = 3
def sdkRevision  = 0 // sdk revision of a release


def minMajorVersion = majorVersion
def minMinorVersion = minorVersion
def minPatchVersion = patchVersion

def releaseType = "SNAPSHOT";

version = "${majorVersion}.${minorVersion}.${patchVersion}-${releaseType}"

/*
def gitSha ={
    'git rev-parse --short HEAD'.execute().text.trim()
}()
*/

def buildTime ={
    new Date().format("yyyy-MM-dd'T'HH:m'Z'", TimeZone.getTimeZone("UTC"))
}()


// android configuration
android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    jacoco {
        version = '0.6.2.201302030002'
    }

    testOptions{

    }

    defaultConfig {
        versionCode  majorVersion*10000+minorVersion*1000+patchVersion*100+sdkRevision
        versionName  version
        buildConfigField "String", "API_VERSION", "\"${majorVersion}.${minorVersion}.${patchVersion}\""
        buildConfigField "String", "MIN_API_VERSION", "\"${minMajorVersion}.${minMinorVersion}.${minPatchVersion}\""
        //buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        minSdkVersion 10
        targetSdkVersion 21
    }

    compileOptions {
        sourceCompatibility  JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    buildTypes {
        debug {
          testCoverageEnabled true
        }
    }

	lintOptions {
		abortOnError false
	}

    libraryVariants.all { variant ->
        task("generate${variant.name}Javadoc", type: Javadoc) {
            description "Generates Javadoc for $variant.name."
            source = variant.javaCompile.source
            ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
            destinationDir = file('docs');
            //exclude "**/impl/**"
            //exclude "**/BuildConfig**"
            exclude "com/baasbox/android/R.java"
            failOnError = false
            options.docletpath = [file("./doclets/BBDoclet-1.0.jar")]
            options.doclet = 'com.baasbox.tools.BaasDoclet'

            classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)
        }
    }

}

dependencies {
    provided ('com.squareup.okhttp:okhttp:2.+'){
        exclude group: 'com.android.support'

    }
    provided ('com.github.bumptech.glide:glide:3.3.+'){
        exclude group: 'com.android.support'

    }
}

task coreLibJar(type: Jar) {
    from fileTree(dir: 'build/intermediates/classes/release').matching { 'com/baasbox/android/**' }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from fileTree(dir: 'src')
}

task docJar(type: Jar) {
    classifier = 'javadoc'
    from fileTree(dir: 'docs')
}

artifacts {
    archives coreLibJar
    archives docJar
    archives sourceJar
}


if(project.hasProperty("local.config")
   && new File(project.property("local.config")+".gradle").exists()) {

  apply from: project.property("local.config")+".gradle";

  ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

  signing {
      required {isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives")}
      sign configurations.archives
  }


  uploadArchives {
      repositories {
          mavenDeployer {
              if(isReleaseVersion){
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
              }

              repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/"){
                authentication(userName: sonatypeUser, password: sonatypePass)
              }

              snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/"){
                authentication(userName: sonatypeUser, password: sonatypePass)
              }

              pom.groupId = 'com.baasbox'
              pom.artifactId = 'baasbox-android'
              pom.version = "${version}"
              pom.packaging = 'jar'
              pom.project {
                  name  'BaasBox Android SDK'
                  description "A library providing bindings for BaasBox rest services"
                  url 'http://www.baasbox.com'
                  inceptionYear '2013'
                  licenses {
                      license {
                          name 'The Apache Sofware License, Version 2.0'
                          url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                          distribution 'repo'
                      }
                  }
                  organization {
                      name 'BAASBOX'
                      url 'http://www.baasbox.com'
                  }
                  scm {
                      connection = 'scm:git@github.com:baasbox/Android-SDK.git'
                      developerConnection = 'scm:git@github.com:baasbox/Android-SDK.git'
                      url 'http://github.com/baasbox/Android-SDK'
                  }
                  developers {
                      developer {
                          id 'aKtor'
                          name 'Andrea Tortorella'
                          email 'a.tortorella@baasbox.com'
                          organization = 'BAASBOX'
                          organizationUrl 'http://www.baasbox.com'
                      }
                  }
              }
          }
      }
  }
}

// support for local extensions to configuration
if(new File("dev-config.gradle").exists()){
    apply from: "dev-config.gradle"
}
